◾️1章
・ブラウザからサーバーにコンテンツを要求し、要求されたコンテンツをブラウザに送信するというやりとりのことを「HTTP」と呼ぶ

・静的サイト→誰がいつ見ても同じ内容

・動的サイト→誰がいつ見るかによって内容が異なる
└サーバサイドスクリプト
(サーバー側でスクリプトを実行する。)

└クライアントサイドスクリプト
(あらかじめスクリプトが埋め込まれたHTMLファイルをブラウザ側に送信し、ブラウザ側でスクリプトを実行する。
flaskチュートリアルはこっち?)


◾️2章
・サーバー→情報やサービスを提供する役割

・クライアント→サーバーから提供された情報やサービスを利用する役割

・プロトコル→ネットワーク接続された機器同士がやりとりする際のルール

・TCP/IP→プロトコルの集まり

・TCP/IPは
アプリケーション層、トランスポートそう、インターネット層、ネットワークインターフェース層に分かれている
(P39の1番上の図内のTCP,IPとは違うもの？)

・IPアドレス→コンピューターを特定しデータの行き先を管理するためのインターネット上の住所のようなもの

・ポート番号→コンピューターが提供するサービスを指定するためのもの。
IPアドレスと一緒に使う。

・ドメイン→IPアドレスを文字列にしたもの。
IPアドレスと紐づいている。

・DNS→ドメインをIPアドレスに変換する仕組み

・HTTP→ブラウザとサーバー間でのデータのやりとりの手順や内容を決めている


◾️3章
・HTTPメッセージ→ブラウザとサーバーでやりとりする際に利用されるデータ形式
└HTTPリクエスト(ブラウザからの要求)
└HTTPレスポンス(サーバーからの応答)

・HTTPメソッド→HTTPリクエストを使ってサーバーに具体的な要求を伝えているもの

・HTTPメソッドでよく使われるメソッド
└GET→取得も送信も出来るが機密性を考慮して主にデータ取得時に使われる
└POST→データ送信時に使われる

・ステータスコード→HTTPレスポンス内に含まれるサーバー内での処理結果

・TCP→HTTPのデータのやりとりを行う。
サイトの閲覧だけでなくメールの送受信やファイル転送時にも利用されている。

・コネクション→クライアントとサーバーが互いに通信できる状態か確認したあとに確立される通信経路の事

・HTTPS→安全性を確保してデータを守る仕組み

・SSLサーバー証明書
→webサイトを運営する会社の身元を確認するもの

・ステートフル→状態を保持し次の処理内容に反映させる

・ステートレス→状態を保持せず、リクエストとレスポンスの1往復のやりとりで完結される処理。
HTTPはステートレス。

・Cookie→HTTPを使用して状態を保持したい時に使用されるデータ

・セッション→ブラウザとサーバーのやりとりで、一連の関連性のある処理の流れのこと

・URI→リソースを識別するための記述方法。
URLとURNを足したもの？


◾️4章
・XML→HTMLが文書を記述することに特化しているのに対し、個別の目的に応じて汎用的に使える

・スクリプト言語→動的処理をする際に使われる。
一般的にはHTMLと分離させて使う。

・DOM→HTMLなどを扱うための手法。
プログラムからHTMLを参照、制御する。

・JSON→構造化したデータを表す。
JavaScriptでよく使われる？

・フィード→webサイトなどの更新履歴を配信するためのファイル


◾️5章
・webアプリの3層構造→
プレゼンテーション層
└ユーザーインターフェース、ユーザーが操作する部分？

アプリケーション層
└ユーザーからの命令を実行

データ層
└データ処理や保管


・MVCモデル→
model
└アプリケーションの扱うデータと業務処理

view
└ユーザーへの出力処理

controller
└必要な処理をmodelやviewに伝える

MVCモデルの表す範囲はアプリケーション層とデータ層

・フレームワーク→データの処理の流れをひな形としてプログラム開発出来るようにしたもの

・アプリケーションサーバー→webサーバーから転送されてきたデータを受け取りサーバサイドプログラムを実行する

・キャッシュサーバー→リクエストに対するレスポンスを覚えておき、コンテンツの読み込みやデータ検索を省くためのもの

・Ajax→非同期通信。
レスポンス待ちの間も他の箇所の更新やユーザーの操作受付を行う。

・web API→アプリケーションがwebサーバーの機能を利用するためのインターフェース。
ユーザーがwebブラウザから操作しなくてもアプリケーションが直接webサービスを利用できる。

・CGI→webサーバーがクライアントからの要求に応じてサーバーサイドスクリプトを起動するための仕組み。


◾️6章
・情報セキュリティ
└機密性..アクセスを認められたものだけがアクセス出来る
└完全性..情報が破壊、改ざん、消去されていない状態
└可用性..必要なときにいつでも情報にアクセス出来る状態

・Dos攻撃→短時間にサーバーが処理しきれないような大量のアクセスを行い、サービスを停止させる攻撃

・クロスサイトスクリプティング(XSS)
→リンクにアクセスすると脆弱性のあるwebページを介してスクリプトがユーザーのwebブラウザに送り込まれる

・CSRF
XSSと同じく攻撃者が用意した、悪意のあるリンクにアクセスすると被害を受ける攻撃。
XSSとの違いは本人になりしましてログインの必要なサイトを操作すること。

・SQLインジェクション
DBサーバーに対して、判定できる語句を送信してDBに意図しない動作を行わせる攻撃

・ファイアウォール
インターネットと内部ネットワークに設置し送受信されるデータを監視して通信の許可・拒否を行う

・IDS
システムに不正なアクセスがあった場合に管理者にメールする

・IPS
通知だけでなく通信の遮断を行う

・WAF
IDSやIPSでは感知できない、やり取りされるパケットの中身を見て悪意のあるデータが含まれていないか
チェックする。
高性能だが費用も高い。

・公開鍵証明書（SSL証明書）
┗HTTPS通信に使うための公開鍵の持ち主が誰なのかを証明する
┗その公開鍵の持ち主が実在するかを証明する


■7章
・ロードバランサー
サーバーを冗長化するときにシステムに届くリクエストをどのサーバーに振り分けるかを決める